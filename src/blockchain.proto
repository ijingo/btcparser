package ustore;

message Block {
  required uint32 block_length = 1; // Lenght in byte of the block
  required uint32 block_format_version = 2; // Generally no use in pratical Bitcoin protocol
  required string previous_block_hash = 3; // A hash pointer to previous block (32 bytes)
  required string merkle_root = 4; // Merkle Root hash
  required uint32 time_stamp = 5; // The block timestamp in UNIX epoch time
  required uint32 bits = 6; // Target of difficulty.  
                            //Hash value of the block header should not exceed this value
  required string block_header_hash = 7; // Hash value of header of this block
  required uint32 block_index = 8; // Index (or height) of this block, 
                                   // the genesis block is considered zero.
  required uint32 total_input_count = 9; // Total number of inputs in all transactions.
  required uint32 total_output_count = 10; // Total number of outputs in all transactions.
  required uint64 block_reward = 11; // Block reward in BTC (mint reward + transaction fees).
  required string next_block_hash = 12; // The hash pointer to next block (32 bytes),
                                        // null string value ("") if this is the last block.
  repeated string transaction_id = 13; // The list of transactions, storing transaction hashs.
}

message Transaction {
  required uint32 transaction_version = 1;
  required uint32 input_count = 2; // The number of inputs in the block;
                                   // Although in theory this could be >32 bits,
                                   // in practice, it never will be.
  required uint32 output_count = 3; // The number of outputs in the block.
  required uint32 lock_time = 4; // The lock time, in practice always set to zero.
  required string transaction_hash = 5; // The hash of this transaction, used as its id.
  required uint32 transaction_length = 6; // The length in byte of this transaction.
  required uint32 transaction_index = 7; // The sequential index number of this transaction.


  required string block_hash = 8; // The block hash of block which this transaction contained in.
  required bool coinbase = 9; // Whether this transaction is a coinbase transaction.
  required uint64 input_amount = 10; // The amount BTC of inputs.
  required uint64 output_amount = 11; // The amount BTC of outputs.
  required uint64 transactoin_fees = 12; // The transaction fees (output_amount - input_amount).

  repeated TransactionInput txn_inputs = 13;
  repeated TransactionOutput txn_outputs = 14;
}

message TransactionInput {
  required string transaction_hash = 1;
  required uint32 transaction_index = 2;
  optional string respone_script = 3;
  required uint32 sequence_number = 4; // The sequence number, nonsense in practice.
  required uint64 value = 5; // The amount of value this input represents.

  required string input_address = 6; // The credit account.
  required string input_address_version = 7; // The version of credit account consumed by this input.
}

message TransactionOutput {

  enum KeyType {
    KT_UNKNOWN,  // unable to decode the public key
    KT_UNCOMPRESSED_PUBLIC_KEY,
    KT_COMPRESSED_PUBLIC_KEY,
    KT_RIPEMD160,
    KT_TRUNCATED_COMPRESSED_KEY,
    KT_MULTISIG,
    KT_STEALTH,
    KT_SCRIPT_HASH,
    KT_ZERO_LENGTH,
    KT_LAST
  };

  required uint64 value = 1;
  optional string challenge_script = 2;
  required KeyType key_type = 4;
  required string output_address = 5;

  // Hte version of debit account generated by this output.
  required string output_address_version = 6; 
}

message Account {
  required string address = 1; // Address of this account.
  required uint64 balance = 2; // Balance of this account.

  repeated TransactionOutput utxo = 3; // Unspent transaction outputs of this address.
}
